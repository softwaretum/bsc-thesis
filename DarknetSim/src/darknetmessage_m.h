//
// Generated file, do not edit! Created by opp_msgc 4.3 from darknetmessage.msg.
//

#ifndef _DARKNETMESSAGE_M_H_
#define _DARKNETMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>darknetmessage.msg</tt> by opp_msgc.
 * <pre>
 * enum DarknetMessageType {
 *     DM_UNKNOWN = 0;
 *     
 *     
 *     DM_REQUEST = 10;
 *     DM_RESPONSE = 11;
 *     
 *     
 *     DM_CON_SYN = 20;
 *     DM_CON_ACK = 21;
 *     
 *     DM_FORWARD = 30;
 * }
 * </pre>
 */
enum DarknetMessageType {
    DM_UNKNOWN = 0,
    DM_REQUEST = 10,
    DM_RESPONSE = 11,
    DM_CON_SYN = 20,
    DM_CON_ACK = 21,
    DM_FORWARD = 30
};

/**
 * Class generated from <tt>darknetmessage.msg</tt> by opp_msgc.
 * <pre>
 * packet DarknetMessage {
 * 
 *     string destNodeID;
 *     string srcNodeID;
 *     int TTL = 32;
 *     int type @enum(DarknetMessageType);
 *     string visitedNodes[];
 * }
 * </pre>
 */
class DarknetMessage : public ::cPacket
{
  protected:
    opp_string destNodeID_var;
    opp_string srcNodeID_var;
    int TTL_var;
    int type_var;
    opp_string *visitedNodes_var; // array ptr
    unsigned int visitedNodes_arraysize;

  private:
    void copy(const DarknetMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DarknetMessage&);

  public:
    DarknetMessage(const char *name=NULL, int kind=0);
    DarknetMessage(const DarknetMessage& other);
    virtual ~DarknetMessage();
    DarknetMessage& operator=(const DarknetMessage& other);
    virtual DarknetMessage *dup() const {return new DarknetMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getDestNodeID() const;
    virtual void setDestNodeID(const char * destNodeID);
    virtual const char * getSrcNodeID() const;
    virtual void setSrcNodeID(const char * srcNodeID);
    virtual int getTTL() const;
    virtual void setTTL(int TTL);
    virtual int getType() const;
    virtual void setType(int type);
    virtual void setVisitedNodesArraySize(unsigned int size);
    virtual unsigned int getVisitedNodesArraySize() const;
    virtual const char * getVisitedNodes(unsigned int k) const;
    virtual void setVisitedNodes(unsigned int k, const char * visitedNodes);
};

inline void doPacking(cCommBuffer *b, DarknetMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DarknetMessage& obj) {obj.parsimUnpack(b);}


#endif // _DARKNETMESSAGE_M_H_
